// Copyright (c) 2013-2014 by Michael Dvorkin. All Rights Reserved.
// Use of this source code is governed by a MIT-style license that can
// be found in the LICENSE file.

package donna

var (
	valuePawn      = Score{  100,  130 }
	valueKnight    = Score{  350,  330 } //  412, 427
	valueBishop    = Score{  355,  360 } //  422, 432
	valueRook      = Score{  525,  550 } //  641, 645
	valueQueen     = Score{ 1000, 1015 } // 1273, 1291

	rightToMove    = Score{   12,    5 }
	bishopPair     = Score{   25,   65 }
	bishopPawns    = Score{    5,   15 } //~~~
	rookOnPawn     = Score{    5,   15 }
	rookOnOpen     = Score{   20,   10 }
	rookOnSemiOpen = Score{   10,    5 }
	rookOn7th      = Score{    5,   10 }
	queenOnPawn    = Score{    2,   10 } //~~~
	queenOn7th     = Score{    1,    4 } //~~~
	behindPawn     = Score{    4,    0 } //~~~
	attackForce    = Score{    2,    4 }
	shieldMissing  = Score{   30,    0 } // Missing shield pawn penalty.
	shieldDistance = Score{    5,    0 } // Shield pawn row distance from king penalty.
)

// Piece/square bonus points from the Black's point of view ([0] => middle game, [1] => endgame).
var bonusPawn = [2][64]int{
	{
	        0,   0,   0,   0,   0,   0,   0,   0,   // A1 - A8
	        7,  11,  23,  39,  39,  23,  11,   7,
	       -5,   1,  14,  29,  29,  14,   1,  -5,
	      -14,  -8,   6,  17,  17,   6,  -8, -14,
	      -21,  -16,  5,   9,   9,  -1, -16, -21,
	      -21,  -16, -6,   4,   4,  -6, -16, -21,
	      -21,  -16, -6,  -1,  -1,  -6, -16, -21,
	        0,   0,   0,   0,   0,   0,   0,   0,   // H1 - H8
	}, {
	        0,   0,   0,   0,   0,   0,   0,   0,   // A1 - A8
	        0,   0,   0,   0,   0,   0,   0,   0, 	// 45,  30,  16,   5,   5,  16,  30,  45,
	        0,   0,   0,   0,   0,   0,   0,   0, 	// 30,  14,   1, -10, -10,   1,  14,  30,
	        0,   0,   0,   0,   0,   0,   0,   0, 	// 18,   2,  -8, -15, -15,  -8,   2,  18,
	        0,   0,   0,   0,   0,   0,   0,   0, 	// 10,  -5, -15, -20, -20, -15,  -5,  10,
	        0,   0,   0,   0,   0,   0,   0,   0, 	//  5, -10, -20, -25, -25, -15, -10,   5,
	        0,   0,   0,   0,   0,   0,   0,   0, 	//  5, -10, -20, -25, -25, -15, -10,   5,
	        0,   0,   0,   0,   0,   0,   0,   0,   // H1 - H8
	},
}

var bonusKnight = [2][64]int{
	{
	      -59, -39, -29, -29, -29, -29, -39, -59, // A1 - A8
	      -39,  21,  41,  41,  41,  41,  29, -10,
	      -39,  46,  61,  71,  71,  61,  46, -39,
	      -39,  41,  51,  51,  51,  41,  41, -39,
	      -39,  11,  41,  36,  36,  41,  11, -39,
	      -39,   1,  31,  26,  26,  31,   1, -39,
	      -54, -39,  -9,  11,  11,  -9, -39, -54,
	      -69, -19, -24, -14, -14, -24, -19, -69, // H1 - H8
	}, {
	      -63, -53, -43, -43, -43, -43, -53, -63, // A1 - A8
	      -53, -43,  38,  48,  48,  38, -43, -53,
	      -43,  28,  78,  73,  73,  78,  28, -43,
	      -43,  38,  73,  78,  78,  73,  28, -43,
	      -43,  38,  58,  68,  68,  58,  38, -43,
	      -43,  18,  48,  38,  38,  48,  28, -43,
	      -53, -43,  18,  28,  28,  18, -43, -53,
	      -63, -53, -43, -43, -43, -43, -53, -63, // H1 - H8
	},
}

var bonusBishop = [2][64]int{
	{
	      -20, -18, -16, -14, -14, -16, -18, -20, // A1 - A8
	      -10,  11,   1,   1,   1,   1,  11, -10,
	        1,  11,  21,  26,  26,  21,  11,   1,
	        1,  21,  21,  26,  26,  21,  21,   1,
	        1,   1,  16,  21,  21,  16,   1,   1,
	      -25,   6,  16,  11,  11,  16,   6, -25,
	      -28,  11,   6,   1,   1,   6,  11, -28,
	      -30, -25, -20, -20, -20, -20, -25, -30, // H1 - H8
	}, {
	      -38, -18,  -8,   2,   2,  -8, -18, -38, // A1 - A8
	      -18,  -8,   0,  12,  12,   0,  -8, -18,
	       -8,   2,  20,  22,  22,  20,   2,  -8,
	        2,  12,  17,  22,  22,  17,  12,   2,
	        2,  12,  16,  20,  20,  16,  12,   2,
	       -8,   2,  10,  12,  12,  10,   2, -18,
	      -18,  -8,   2,   7,   7,   2,  -8, -18,
	      -38, -18,  -8,   2,   2,  -8, -18, -38, // H1 - H8
	},
}

var bonusRook = [2][64]int{
	{
	       -8,  -6,   2,   7,   7,   2,  -6,  -8, // A1 - A8
	        2,   2,   7,  12,  12,   7,   2,   2,
	       -8,  -6,   6,  10,  10,   6,  -6,  -8,
	       -8,  -6,   6,   8,   8,   6,  -6,  -8,
	       -8,  -6,   6,   7,   7,   6,  -6,  -8,
	       -8,  -6,   6,   7,   7,   6,  -6,  -8,
	       -8,  -6,   2,   7,   7,   2,  -6,  -8,
	       -8,  -6,   2,   7,   7,   2,  -6,  -8, // H1 - H8
	}, {
	        0,   0,   0,   0,   0,   0,   0,   0, // A1 - A8
	        0,   0,   0,   0,   0,   0,   0,   0,
	        0,   0,   0,   0,   0,   0,   0,   0,
	        0,   0,   0,   0,   0,   0,   0,   0,
	        0,   0,   0,   0,   0,   0,   0,   0,
	        0,   0,   0,   0,   0,   0,   0,   0,
	        0,   0,   0,   0,   0,   0,   0,   0,
	        0,   0,   0,   0,   0,   0,   0,   0, // H1 - H8
	},
}

var bonusQueen = [2][64]int{
	{
	        4,   4,   4,   4,   4,   4,   4,   4, // A1 - A8
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,
	       -6,  -6,  -1,   4,   4,  -1,  -6,  -6,
	      -16, -11,  -1,   4,   4,  -1, -11, -16,
	      -26, -16,  -6,   4,   4,  -6, -16, -26, // H1 - H8
	}, {
	      -26,  -6,  -1,   4,   4,  -1,  -6, -26, // A1 - A8
	      -16,   4,  19,  29,  29,  19,   4, -16,
	       -6,   9,  24,  34,  34,  24,   9,  -6,
	       -6,   9,  24,  34,  34,  24,   9,  -6,
	       -6,   9,  24,  34,  34,  24,   9,  -6,
	      -16,  -1,  14,  24,  24,  14,  -1, -16,
	      -31, -26, -16,  -6,  -6, -16, -26, -31,
	      -46, -41, -31, -26, -26, -31, -41, -46, // H1 - H8
	},
}

var bonusKing = [2][64]int{
	{
	      -55, -55, -60, -70, -70, -60, -55, -55, // A1 - A8
	      -55, -55, -60, -70, -70, -60, -55, -55,
	      -55, -55, -60, -70, -70, -60, -55, -55,
	      -55, -55, -60, -70, -70, -60, -55, -55,
	      -50, -50, -55, -60, -60, -55, -50, -50,
	      -40, -40, -45, -50, -50, -45, -40, -40,
	      -30, -30, -30, -35, -35, -30, -30, -30,
	      -20,   0,   0, -10, -10,   0,   0, -20, // H1 - H8
	}, {
              -10,  10,  15,  20,  20,  15,  10, -10, // A1 - A8
		0,  20,  35,  45,  45,  35,  20,   0,
               10,  25,  40,  50,  50,  40,  25,  10,
               10,  25,  40,  50,  50,  40,  25,  10,
               10,  25,  40,  50,  50,  40,  25,  10,
		0,  15,  30,  40,  40,  30,  15,   0,
              -15, -10,   0,  10,  10,   0, -10, -15,
              -30, -25, -15, -10, -10, -15, -25, -30, // H1 - H8
	},
}

var bonusPassedPawn = [2][64]int{
	{
		0,   0,   0,   0,   0,   0,   0,   0, // A1 - A8
	       72,  65,  57,  50,  50,  57,  65,  72,
	       52,  46,  45,  40,  40,  45,  48,  52,
	       37,  35,  32,  30,  30,  32,  35,  37,
	       25,  22,  20,  17,  17,  20,  22,  25,
	       15,  14,  13,  12,  12,  13,  14,  15,
	        7,   6,   6,   5,   5,   6,   6,   7,
		0,   0,   0,   0,   0,   0,   0,   0, // H1 - H8
	},
	{
		0,   0,   0,   0,   0,   0,   0,   0, // A1 - A8
	      145, 130, 115, 100, 100, 115, 130, 145,
	      105,  97,  90,  80,  80,  90,  97, 105,
	       75,  70,  65,  60,  60,  65,  70,  75,
	       50,  45,  40,  35,  35,  40,  45,  50,
	       30,  28,  26,  25,  25,  26,  28,  30,
	       15,  14,  12,  10,  10,  12,  14,  15,
		0,   0,   0,   0,   0,   0,   0,   0, // H1 - H8
         },
}

var penaltyDoubledPawn = [2][8]int{
	{ -45,  20,   0,  10,  10,   0, -20, -45 }, // Middle of the game.
	{ -60, -25, -20, -20, -20, -20, -25, -60 }, // End of the game.
}

var penaltyIsolatedPawn = [2][8]int{
	{ -15, -15, -15, -10, -10, -15, -15, -15 }, // Middle of the game.
	{ -25, -25, -25, -20, -20, -25, -25, -25 }, // End of the game.
}

// [1] Pawn, [2] Knight, [3] Bishop, [4] Rook, [5] Queen
var penaltyPawnThreat = [6]Score {
	{0, 0}, {0, 0}, {26, 35}, {26, 35}, {38, 49}, {43, 59},
}

var mobilityKnight = [9]Score{
	{-15, -12}, {-10, -8}, {-4, -4}, {1, 0}, {6, 3}, {11, 7}, {15, 10}, {17, 12}, {18, 12},
}

var mobilityBishop = [16]Score{
	{-10, -12}, {-4, -6}, { 2,  0}, { 8,  6}, {14, 12}, {20, 18}, {25, 23}, {28, 26},
	{ 31,  28}, {32, 30}, {33, 31}, {34, 32}, {35, 33}, {36, 34}, {36, 34}, {36, 34},
}

var mobilityRook = [16]Score{
	{-8, -15}, {-5, -7}, {-3,  0}, { 0,  6}, { 2, 13}, { 5, 20}, { 7, 27}, { 9, 34},
	{ 10, 41}, {11, 46}, {12, 49}, {13, 51}, {14, 52}, {14, 52}, {15, 53}, {15, 53},
}

var mobilityQueen = [32]Score{
	{-5, -8}, {-4, -6}, {-2, -3}, {-1, -1}, {0,  1}, {1,  4}, {2,  6}, {3,  9},
	{ 5, 11}, { 6, 13}, { 7, 15}, { 7, 15}, {8, 16}, {9, 16}, {9, 16}, {9, 16},
}
