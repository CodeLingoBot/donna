// Copyright (c) 2013-2014 by Michael Dvorkin. All Rights Reserved.
// Use of this source code is governed by a MIT-style license that can
// be found in the LICENSE file.

package donna

var (
	valuePawn      = Score{  100,  129 }
	valueKnight    = Score{  408,  423 } //  350,  330
	valueBishop    = Score{  418,  428 } //  355,  360
	valueRook      = Score{  635,  639 } //  525,  550
	valueQueen     = Score{ 1260, 1279 } // 1000, 1015

	rightToMove    = Score{   12,   10 }
	pawnBlocked    = Score{    4,   12 } //~~~
	bishopPair     = Score{   43,   56 } //~~~
	bishopPawns    = Score{    4,    6 }
	bishopBoxed    = Score{   73,    0 } //~~~
	rookOnPawn     = Score{    5,   14 }
	rookOnOpen     = Score{   22,   10 }
	rookOnSemiOpen = Score{    9,    5 }
	rookOn7th      = Score{    5,   10 }
	rookBoxed      = Score{   45,    0 }
	queenOnPawn    = Score{    2,   10 }
	queenOn7th     = Score{    1,    4 }
	behindPawn     = Score{    8,    0 }
	shieldMissing  = Score{   30,    0 } //~~~ Missing shield pawn penalty.
	shieldDistance = Score{    5,    0 } //~~~ Shield pawn row distance from king penalty.
)

// Piece/square table: gets initilized on startup from the bonus arrays below.
var pst = [14][64]Score{{},}

// Piece/square bonus points arranged from Black's point of view. To make it
// more visual use two indices instead of Score: [0] => midgame, [1] => endgame.
var bonusPawn = [2][64]int{
	{
	        0,   0,   0,   0,   0,   0,   0,   0,   // A1 - H1
	      -10,  -3,   2,   7,   7,   2,  -3, -10,
	      -10,  -3,   4,   7,   7,   4,  -3, -10,
	      -10,  -3,   8,  17,  17,   8,  -3, -10,
	      -10,  -3,   8,  27,  27,   8,  -3, -10,
	      -10,  -3,   4,  17,  17,   4,  -3, -10,
	      -10,  -3,   2,   7,   7,   2,  -3, -10,
	        0,   0,   0,   0,   0,   0,   0,   0,   // A8 - H8
	}, {
	        0,   0,   0,   0,   0,   0,   0,   0,   // A1 - H1
	       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
	       -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,
	       -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,
	       -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,
	       -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,
	       -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,
	        0,   0,   0,   0,   0,   0,   0,   0,   // A8 - H8
	},
}

var bonusKnight = [2][64]int{
	{
	      -96, -33, -19, -12, -12, -19, -33, -96,	// A1 - H1
	      -26, -12,   0,   6,   6,   0, -12, -26,
	       -5,   6,  20,  27,  27,  20,   6,  -5,
	       -5,   6,  20,  27,  27,  20,   6,  -5,
	      -12,   0,  13,  20,  20,  13,   0, -12,
	      -26, -12,   0,   6,   6,   0, -12, -26,
	      -46, -33, -19, -12, -12, -19, -33, -46,
	      -67, -53, -40, -33, -33, -40, -53, -67,	// A8 - H8
	}, {
	      -52, -39, -27, -21, -21, -27, -39, -52,	// A1 - H1
	      -39, -27, -15,  -8,  -8, -15, -27, -39,
	      -27, -15,  -3,   2,   2,  -3, -15, -27,
	      -21,  -8,   2,   9,   9,   2,  -8, -21,
	      -21,  -8,   2,   9,   9,   2,  -8, -21,
	      -27, -15,  -3,   2,   2,  -3, -15, -27,
	      -39, -27, -15,  -8,  -8, -15, -27, -39,
	      -52, -39, -27, -21, -21, -27, -39, -52,	// A8 - H8
	},
}

var bonusBishop = [2][64]int{
	{
	       -8,  -8,  -6,  -4,  -4,  -6,  -8,  -8,	// A1 - H1
	       -8,   0,  -2,   0,   0,  -2,   0,  -8,
	       -6,  -2,   4,   2,   2,   4,  -2,  -6,
	       -4,   0,   2,   8,   8,   2,   0,  -4,
	       -4,   0,   2,   8,   8,   2,   0,  -4,
	       -6,  -2,   4,   2,   2,   4,  -2,  -6,
	       -8,   0,  -2,   0,   0,  -2,   0,  -8,
	      -20, -20, -17, -15, -15, -17, -20, -20,	// A8 - H8
	}, {
	      -29, -21, -17, -13, -13, -17, -21, -29,	// A1 - H1
	      -21, -13,  -9,  -5,  -5,  -9, -13, -21,
	      -17,  -9,  -5,  -2,  -2,  -5,  -9, -17,
	      -13,  -5,  -2,   2,   2,  -2,  -5, -13,
	      -13,  -5,  -2,   2,   2,  -2,  -5, -13,
	      -17,  -9,  -5,  -2,  -2,  -5,  -9, -17,
	      -21, -13,  -9,  -5,  -5,  -9, -13, -21,
	      -29, -21, -17, -13, -13, -17, -21, -29,	// A8 - H8
	},
}

var bonusRook = [2][64]int{
	{
	       -6,  -3,  -1,   1,   1,  -1,  -3,  -6,	// A1 - H1
	       -6,  -3,  -1,   1,   1,  -1,  -3,  -6,
	       -6,  -3,  -1,   1,   1,  -1,  -3,  -6,
	       -6,  -3,  -1,   1,   1,  -1,  -3,  -6,
	       -6,  -3,  -1,   1,   1,  -1,  -3,  -6,
	       -6,  -3,  -1,   1,   1,  -1,  -3,  -6,
	       -6,  -3,  -1,   1,   1,  -1,  -3,  -6,
	       -6,  -3,  -1,   1,   1,  -1,  -3,  -6,	// A8 - H8
	}, {
	        1,   1,   1,   1,   1,   1,   1,   1, 	// A1 - H1
	        1,   1,   1,   1,   1,   1,   1,   1,
	        1,   1,   1,   1,   1,   1,   1,   1,
	        1,   1,   1,   1,   1,   1,   1,   1,
	        1,   1,   1,   1,   1,   1,   1,   1,
	        1,   1,   1,   1,   1,   1,   1,   1,
	        1,   1,   1,   1,   1,   1,   1,   1,
	        1,   1,   1,   1,   1,   1,   1,   1, 	// A8 - H8
	},
}

var bonusQueen = [2][64]int{
	{
	        4,   4,   4,   4,   4,   4,   4,   4,	// A1 - H1
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,
	        4,   4,   4,   4,   4,   4,   4,   4,	// A8 - H8
	}, {
	      -40, -27, -21, -15, -15, -21, -27, -40,	// A1 - H1
	      -27, -15,  -9,  -3,  -3,  -9, -15, -27,
	      -21,  -9,  -3,   3,   3,  -3,  -9, -21,
	      -15,  -3,   3,   9,   9,   3,  -3, -15,
	      -15,  -3,   3,   9,   9,   3,  -3, -15,
	      -21,  -9,  -3,   3,   3,  -3,  -9, -21,
	      -27, -15,  -9,  -3,  -3,  -9, -15, -27,
	      -40, -27, -21, -15, -15, -21, -27, -40,	// A8 - H8
	},
}

var bonusKing = [2][64]int{
	{
	       47,  59,  34,  10,  10,  34,  59,  47,	// A1 - H1
	       59,  71,  47,  23,  23,  47,  71,  59,
	       71,  83,  59,  34,  34,  59,  83,  71,
	       83,  95,  71,  47,  47,  71,  95,  83,
	       95, 107,  83,  59,  59,  83, 107,  95,
	      107, 119,  95,  71,  71,  95, 119, 107,
	      131, 143, 119,  95,  95, 119, 143, 131,
	      143, 155, 131, 107, 107, 131, 155, 143,	// A8 - H8
	}, {
		9,  38,  52,  67,  67,  52,  38,   9,	// A1 - H1
	       38,  67,  82,  96,  96,  82,  67,  38,
	       52,  82,  96, 111, 111,  96,  82,  52,
	       67,  96, 111, 125, 125, 111,  96,  67,
	       67,  96, 111, 125, 125, 111,  96,  67,
	       52,  82,  96, 111, 111,  96,  82,  52,
	       38,  67,  82,  96,  96,  82,  67,  38,
		9,  38,  52,  67,  67,  52,  38,   9,	// A8 - H8
	},
}

var bonusPassedPawn = [2][64]int{
	{
		0,   0,   0,   0,   0,   0,   0,   0, // A1 - H1
	       72,  65,  57,  50,  50,  57,  65,  72,
	       52,  46,  45,  40,  40,  45,  48,  52,
	       37,  35,  32,  30,  30,  32,  35,  37,
	       25,  22,  20,  17,  17,  20,  22,  25,
	       15,  14,  13,  12,  12,  13,  14,  15,
	        7,   6,   6,   5,   5,   6,   6,   7,
		0,   0,   0,   0,   0,   0,   0,   0, // A8 - H8
	},
	{
		0,   0,   0,   0,   0,   0,   0,   0, // A1 - H1
	      145, 130, 115, 100, 100, 115, 130, 145,
	      105,  97,  90,  80,  80,  90,  97, 105,
	       75,  70,  65,  60,  60,  65,  70,  75,
	       50,  45,  40,  35,  35,  40,  45,  50,
	       30,  28,  26,  25,  25,  26,  28,  30,
	       15,  14,  12,  10,  10,  12,  14,  15,
		0,   0,   0,   0,   0,   0,   0,   0, // A8 - H8
         },
}

var extraKnight = [64]int{
	0,  0,  0,  0,  0,  0,  0,  0, // A1 - H1
	0,  0,  0,  0,  0,  0,  0,  0,
	0,  2,  8,  8,  8,  8,  2,  0,
	0,  4, 13, 17, 17, 13,  4,  0,
	0,  2,  8, 13, 13,  8,  2,  0,
	0,  0,  2,  4,  4,  2,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0, // A8 - H8
}

var extraBishop = [64]int{
	0,  0,  0,  0,  0,  0,  0,  0, // A1 - H1
	0,  0,  0,  0,  0,  0,  0,  0,
	0,  2,  4,  4,  4,  4,  2,  0,
	0,  5, 10, 10, 10, 10,  5,  0,
	0,  2,  5,  5,  5,  5,  2,  0,
	0,  0,  2,  2,  2,  2,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0, // A8 - H8
}

// [1] Pawn, [2] Knight, [3] Bishop, [4] Rook, [5] Queen
var bonusKingThreat = [6]int {
	0, 0, 10, 10, 15, 30,
}

// Supported pawn bonus arranged from Black's point of view. The actual score
// uses the same values for midgame and endgame.
var bonusSupportedPawn = [64]int{
	  0,   0,   0,   0,   0,   0,   0,   0, // A8 - H8
	107, 111, 111, 113, 113, 111, 111, 107,
	 62,  66,  66,  68,  68,  66,  66,  62,
	 31,  34,  34,  36,  36,  34,  34,  31,
	 13,  16,  16,  18,  18,  16,  16,  13,
	  4,   6,   6,   7,   7,   6,   6,   4,
	  1,   3,   3,   4,   4,   3,   3,   1,
	  0,   0,   0,   0,   0,   0,   0,   0, // A1 - H1
}

// [1] Pawn, [2] Knight, [3] Bishop, [4] Rook, [5] Queen
var penaltyPawnThreat = [6]Score {
	{0, 0}, {0, 0}, {26, 35}, {26, 35}, {38, 49}, {43, 59},
}

// Penalty for doubled pawn: A to H, midgame/endgame.
var penaltyDoubledPawn = [8]Score{
	{7, 22}, {10, 24}, {12, 24}, {12, 24}, {12, 24}, {12, 24}, {10, 24}, {7, 22},
}

// Penalty for isolated pawn that is *not* exposed: A to H, midgame/endgame.
var penaltyIsolatedPawn = [8]Score{
	{12, 15}, {18, 17}, {20, 17}, {20, 17}, {20, 17}, {20, 17}, {18, 17}, {12, 15},
}

// Penalty for isolated pawn that is exposed: A to H, midgame/endgame.
var penaltyWeakIsolatedPawn = [8]Score{
	{18, 22}, {27, 26}, {30, 26}, {30, 26}, {30, 26}, {30, 26}, {27, 26}, {18, 22},
}

// Penalty for backward pawn that is *not* exposed: A to H, midgame/endgame.
var penaltyBackwardPawn = [8]Score{
	{10, 14}, {15, 16}, {17, 16}, {17, 16}, {17, 16}, {17, 16}, {15, 16}, {10, 14},
}

// Penalty for backward pawn that is exposed: A to H, midgame/endgame.
var penaltyWeakBackwardPawn = [8]Score{
	{15, 21}, {22, 23}, {25, 23}, {25, 23}, {25, 23}, {25, 23}, {22, 23}, {15, 21},
}

var mobilityKnight = [9]Score{
	{-17, -15}, {-11, -10}, {-4, -5}, {1, 0}, {7, 5}, {13, 10}, {18, 14}, {21, 15}, {22, 16},
}

var mobilityBishop = [16]Score{
	{-11, -13}, {-4, -6}, {3, 0}, {10, 7}, {17, 14}, {24, 21}, {30, 27}, {34, 31},
	{37, 34}, {38, 36}, {40, 37}, {41, 38}, {42, 39}, {43, 40}, {43, 40}, {43, 40},
}

var mobilityRook = [16]Score{
	{-8, -16}, {-5, -8}, {-2, 0}, {0, 8}, {3, 16}, {6, 24}, {9, 32}, {11, 40},
	{13, 48}, {14, 54}, {15, 57}, {16, 59}, {17, 61}, {18, 61}, {18, 62},
}

var mobilityQueen = [16]Score{
	{-6, -10}, {-4, -6}, {-2, -3}, {-1, 0}, {0, 2}, {2, 5}, {3, 8}, {5, 11},
	{6, 14}, {8, 17}, {9, 19}, {10, 20}, {11, 20}, {11, 20}, {12, 20}, {12, 20},
}

var rookBoxA = [2]Bitmask{ // A1,A2,B1 and A8,A7,B8
	0x0000000000000103, 0x0301000000000000,
}

var rookBoxH = [2]Bitmask{ // G1,H1,H2 and G8,H8,H7
	0x00000000000080C0, 0xC080000000000000,
}
